cmake_minimum_required(VERSION 3.13)
project(BaconEngine C CXX)

set(CMAKE_C_STANDARD 17)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_SHARED_LIBRARY_PREFIX "")

option(BE_DISABLE_OFFICIAL_PROJECTS "Don't compile any of the official projects" OFF)
option(BE_DISABLE_TEST_PROJECTS "Don't compile any of the test projects" OFF)
option(BE_DISABLE_OPENGL "Don't compile with OpenGL" OFF)
option(BE_DISABLE_METAL "Don't compile with Metal, does nothing for non-Apple operating systems" OFF)
option(BE_DONT_STRIP "Don't remove debug information (no stripping)" OFF)
option(BE_DONT_SET_BINARY_OUTPUT_PATH "Don't change the binary output path" OFF)
option(BE_NO_ENGINE_COMMANDS "Disable every engine command" OFF)
option(BE_NO_IDE_FOLDERS "Don't make any IDE folders" ON)

macro(engine_project)
    cmake_parse_arguments(PARSED "STANDALONE" "NAME" "SOURCES" ${ARGN})

    if(NOT PARSED_NAME)
        message(FATAL_ERROR "Your client requires a name")
    endif()

    project("${PARSED_NAME}")

    if(BE_SUPPORTS_SHARED_LIBS AND NOT PARSED_STANDALONE)
        message(STATUS "Creating binary client: ${PARSED_NAME}")
        add_library("${PARSED_NAME}" SHARED ${PARSED_SOURCES})
        target_link_libraries("${PARSED_NAME}" LINK_PRIVATE BaconEngine)
        set_target_properties("${PARSED_NAME}" PROPERTIES OUTPUT_NAME "binary")
    else()
        message(STATUS "Creating standalone client: ${PARSED_NAME}")
        add_executable("${PARSED_NAME}" ${PARSED_SOURCES})
        target_link_libraries("${PARSED_NAME}" LINK_PRIVATE BaconEngineLauncher)
    endif()
endmacro()

if(MINGW OR MSYS)
    message(FATAL_ERROR "MinGW is not a supported compiler")
endif()

if(NOT CMAKE_BUILD_TYPE STREQUAL "Debug" AND NOT BE_DONT_STRIP)
    message(STATUS "Binaries will not have any debug information")

    if("${CMAKE_C_COMPILER_ID}" STREQUAL "")
        message(FATAL_ERROR "No C compiler specified (or your C compiler isn't configured correctly), this is a C project, so exiting now")
    elseif(CMAKE_C_COMPILER_ID STREQUAL "AppleClang")
        message(STATUS "Stripping isn't support on AppleClang")
    elseif(CMAKE_C_COMPILER_ID STREQUAL "Clang")
        add_link_options(-Wl,-s)
    elseif(CMAKE_C_COMPILER_ID STREQUAL "GNU")
        set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -s")
    elseif(CMAKE_C_COMPILER_ID STREQUAL "MSVC")
        message(STATUS "Stripping binaries isn't required for MSVC")
    else()
        message(WARNING "Your C compiler is unknown: ${CMAKE_C_COMPILER_ID}")
    endif()

    if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "")
        message(WARNING "No C++ compiler specified (or your C++ compiler isn't configured correctly)")
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
        message(STATUS "Stripping isn't support on AppleClang")
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        add_link_options(-Wl,-s)
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -s")
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
        message(STATUS "Stripping binaries isn't required for MSVC")
    else()
        message(WARNING "Your C++ compiler is unknown: ${CMAKE_CXX_COMPILER_ID}")
    endif()
endif()

get_cmake_property(BE_SUPPORTS_SHARED_LIBS TARGET_SUPPORTS_SHARED_LIBS)

if(NOT BE_SUPPORTS_SHARED_LIBS)
    message(WARNING "Your platform does not support shared libraries, defaulting to BaconEngineLauncher")
endif()

message(STATUS "Adding dependencies")

if(NOT BE_NO_IDE_FOLDERS)
    set_property(GLOBAL PROPERTY USE_FOLDERS ON)
    set_property(GLOBAL PROPERTY FOLDER "Dependencies")
endif()

if(NOT BE_DISABLE_OPENGL)
    find_package(OpenGL REQUIRED)
    set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
    set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
    set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
    add_subdirectory(dependencies/glfw)
    add_subdirectory(dependencies/glad)
endif()

if(NOT BE_DISABLE_METAL AND APPLE) # TODO: Metal
#    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -x objective-c")
endif()

if(NOT BE_NO_IDE_FOLDERS)
    set_property(GLOBAL PROPERTY FOLDER "Official")
endif()

message(STATUS "Adding meta projects")

add_subdirectory(source/SharedEngineCode)
add_subdirectory(source/BaconLauncher)
add_subdirectory(source/BaconEngine)
add_subdirectory(source/BaconEngineLauncher)

if(NOT BE_DISABLE_OFFICIAL_PROJECTS)
    message(STATUS "Adding official engine clients")

    add_subdirectory(source/BaconEditor)
    add_subdirectory(source/BaconLauncherUI)
endif()

if(NOT BE_DISABLE_TEST_PROJECTS)
    if(NOT BE_NO_IDE_FOLDERS)
        set_property(GLOBAL PROPERTY USE_FOLDERS ON)
        set_property(GLOBAL PROPERTY FOLDER "Tests")
    endif()

    message(STATUS "Adding test projects")

    add_subdirectory(test/TestGame)
    add_subdirectory(test/TestClientCPP)
    add_subdirectory(test/StandaloneClientBinary)
    add_subdirectory(test/CustomStandaloneClientBinary)
    add_subdirectory(test/DummyLauncher)
endif()