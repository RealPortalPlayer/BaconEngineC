How packets will work.
--

(MAGIC) (TERM) (ID) (TERM) (CONTENT) (TERM) (TERM)

---

Single content
-

Example:
(MAGIC) (TERM) 01 (TERM) Username (TERM) (TERM)

In hex* would be:
FFFF01FF557365726E616D65FFFF

Which would be:
(MAGIC) (TERM) 01 (TERM) Username                (TERM) (TERM)
FF      FF     01 FF     55 73 65 72 6E 61 6D 65 FF     FF

---

Multiple content
-

There can be multiple content, all separated by a single (TERM):
(MAGIC) (TERM) 01 (TERM) Username (TERM) Password (TERM) (TERM)

In hex* would be:
FFFF01FF57365726E616D65FF50617373776F7264FFFF

Which would be:
(MAGIC) (TERM) 01 (TERM) Username                (TERM) Password                (TERM) (TERM)
FF      FF     01 FF     55 73 65 72 6E 61 6D 65 FF     50 61 73 73 77 6F 72 64 FF     FF

---

Empty parameters
-

If something is empty, then it will be replaced with (EMPTY):
(MAGIC) (TERM) 01 (TERM) Username (TERM) (EMPTY) (TERM) (TERM)

In hex* would be:
FFFF01FF557365726E616D65FFAAFFFF

Which would be:
(MAGIC) (TERM) 01 (TERM) Username                (TERM) (EMPTY) (TERM) (TERM)
FF      FF     01 FF     55 73 65 72 6E 61 6D 65 FF     AA      FF     FF

---

Security
-

Packets are a great tool to help the server and client to communicate. Many services use them.
However, packets are sent and received by the network, and the user (or someone malicious**) can "sniff" these packets out.
The server and client should not send any data that could be dangerous.
Unfortunately, packets could be a great way to send passwords to the server.
Encryption would solve this, but unfortunately, hasn't been implemented yet. It's also not supported by this packet implementation.
Just something to think about.

---

Fail safes
-

Bad actors could also use packets to try slowing the server down. The server has to parse every single packet it sends and receives,
which takes time.
That can be used to overwhelm servers to either lag horribly, or even straight up crash.
To prevent this issue, clients that send malformed packets, or send packets too quickly, will be kicked.
That prevents the script kiddy approach, but people can just reconnect to do it again.
To prevent that, if a user keeps getting kicked for that, then the server will IP ban them.
This should help more, but users can mask their IPs. Unfortunately, there isn't much more we can do other than that.

There will be options for the developer to change how much packets a user can send in a second, and how many times they can be kicked before being permanently IP banned.
The developer can disable these safe guards if they wish, however, that is not advisable, and should be avoided, especially in a production environment.

The server does not have this limitation, and is free to send as many packets as it wish.
Please be wary, since that can enable a bypass for the client if not used carefully, since it would be the server sending it, and
not the client.

---

*: What the server will see.

**: If the user has a virus, their router is compromised, or their ISP does some shady stuff.

(MAGIC): FF: The magic number, helps identify packets. Can be confused with (TERM), which has the same number, but does something different.

(TERM): FF: Terminate number, helps separate packet information, and identify the end of a packet. Also look at (MAGIC).

(EMPTY): AA: Empty number. This is required to pad out packet information.
If a packet has 10 variables, then it has to send that amount of data, but things can be empty.
This solves that problem. Without it, packets with missing information would not deserialize correctly,
which would result in the client getting kicked, and potentially banned due to too many malformed packets.